noTo add the checkpointing feature to your existing consumer classes with minimal changes and make it plug-and-play, you can follow an approach where you create a separate `CheckpointManager` class that handles checkpointing and provides a callback mechanism. This way, your existing consumer classes can use the `CheckpointManager` without needing significant modifications.

Here's how you can structure your code:

1. **CheckpointManager Class**:

   Create a `CheckpointManager` class that handles checkpoint creation, storage, and callback mechanism. This class will encapsulate the checkpointing logic and provide a clean interface for your consumers.

   ```java
   public class CheckpointManager {
       private MongoCollection<Document> checkpointCollection;
       private CheckpointCallback callback;

       public CheckpointManager(MongoCollection<Document> checkpointCollection, CheckpointCallback callback) {
           this.checkpointCollection = checkpointCollection;
           this.callback = callback;
       }

       public void createCheckpoint(String checkpointName, long eventId) {
           Document checkpoint = new Document("checkpointName", checkpointName)
                   .append("lastProcessedId", eventId);

           checkpointCollection.insertOne(checkpoint, (result, t) -> {
               if (t == null) {
                   // Checkpoint is successfully stored in MongoDB
                   // Trigger the checkpoint confirmation callback
                   callback.onCheckpointComplete();
               } else {
                   // Handle MongoDB error
               }
           });
       }
   }
   ```

2. **CheckpointCallback Interface**:

   Define a `CheckpointCallback` interface that your consumer classes will implement. This interface will specify the `onCheckpointComplete` method.

   ```java
   public interface CheckpointCallback {
       void onCheckpointComplete();
   }
   ```

3. **Consumer Class**:

   Modify your existing consumer classes to implement the `CheckpointCallback` interface. Inject the `CheckpointManager` into the consumer class. When an event is processed, call the `createCheckpoint` method, which will, in turn, trigger the callback when the checkpoint is complete.

   ```java
   public class YourConsumerClass implements CheckpointCallback {
       private CheckpointManager checkpointManager;

       public YourConsumerClass(MongoCollection<Document> checkpointCollection) {
           checkpointManager = new CheckpointManager(checkpointCollection, this);
       }

       public void consumeEvent(Event event) {
           // Process the event

           // Capture the event ID or other relevant data
           long eventId = extractEventId(event);

           // Perform checkpointing
           checkpointManager.createCheckpoint("solace_event", eventId);

           // Continue processing and respond to Solace
       }

       @Override
       public void onCheckpointComplete() {
           // This method will be called when the checkpoint is confirmed
           // You can proceed with sending the response to Solace or any other action.
       }
   }
   ```

This approach allows your existing consumer classes to remain mostly unchanged. You only need to implement the `CheckpointCallback` interface and inject the `CheckpointManager`. The `CheckpointManager` class encapsulates the checkpointing logic and makes it easy to integrate checkpointing into your existing consumers in a plug-and-play manner.


////

              
public Map<String, DealProduct> loadAllsyndicatedUnderwrittenDealProducts() {
    return StreamSupport.stream(
            dealProductRepository.whereDirect()
                    .eq(DealProduct.FUNDING_ARRANGEMENT, SYNDICATED)
                    .eq(DealProduct.DISTRIBUTION_METHOD, UNDERWRITTEN)
                    .fetch()
                    .spliterator(), false)
            .collect(
                    toMap(
                            DealProduct::getDealId,
                            identity(),
                            this::mergeDealProducts
                    )
            );
}

private DealProduct mergeDealProducts(DealProduct dp1, DealProduct dp2) {
    if (!StringUtils.isEmpty(dp1.getTypeOfLoan()) || !StringUtils.isEmpty(dp2.getTypeOfLoan())) {
        // Keep the one with non-empty typeOfLoan
        return StringUtils.isEmpty(dp1.getTypeOfLoan()) ? dp2 : dp1;
    } else if (!StringUtils.isEmpty(dp1.getUwStatus()) || !StringUtils.isEmpty(dp2.getUwStatus())) {
        // Keep the one with non-empty uwStatus
        return StringUtils.isEmpty(dp1.getUwStatus()) ? dp2 : dp1;
    } else {
        // Priority to the one with the latest date, or the one with a date if both have a date defined
        if (!StringUtils.isEmpty(dp2.getDate()) && !StringUtils.isEmpty(dp1.getDate())) {
            if (dp2.getDate().isAfter(dp1.getDate())) {
                return dp2;
            } else {
                return dp1;
            }
        } else if (!StringUtils.isEmpty(dp2.getDate())) {
            return dp2;
        } else {
            return dp1;
        }
    }
}




import org.junit.Test;

import static org.junit.Assert.assertEquals;

public class DealProductMergeTest {
    @Test
    public void testMergeDealProducts() {
        // Scenario 1: Both have non-empty typeOfLoan
        DealProduct dp1 = new DealProduct();
        dp1.setTypeOfLoan("Loan1");

        DealProduct dp2 = new DealProduct();
        dp2.setTypeOfLoan("Loan2");

        DealProductMerger merger = new DealProductMerger();
        DealProduct merged1 = merger.mergeDealProducts(dp1, dp2);

        assertEquals("Loan1", merged1.getTypeOfLoan());

        // Scenario 2: One has non-empty typeOfLoan, the other is empty
        dp1.setTypeOfLoan("Loan1");
        dp2.setTypeOfLoan("");

        DealProduct merged2 = merger.mergeDealProducts(dp1, dp2);

        assertEquals("Loan1", merged2.getTypeOfLoan());

        // Scenario 3: Both have empty typeOfLoan, one has non-empty uwStatus
        dp1.setTypeOfLoan("");
        dp2.setTypeOfLoan("");
        dp1.setUwStatus("Status1");
        dp2.setUwStatus("");

        DealProduct merged3 = merger.mergeDealProducts(dp1, dp2);

        assertEquals("Status1", merged3.getUwStatus());

        // Scenario 4: Both have empty typeOfLoan, both have empty uwStatus, one has a date
        dp1.setUwStatus("");
        dp2.setUwStatus("");
        dp1.setDate("2022-01-01");
        dp2.setDate("");

        DealProduct merged4 = merger.mergeDealProducts(dp1, dp2);

        assertEquals("2022-01-01", merged4.getDate());

        // Scenario 5: Both have empty typeOfLoan, both have empty uwStatus, both have a date
        dp1.setDate("2022-01-01");
        dp2.setDate("2023-02-02");

        DealProduct merged5 = merger.mergeDealProducts(dp1, dp2);

        assertEquals("2023-02-02", merged5.getDate());
    }
}



///////

import java.util.*;
import java.util.function.*;
import java.util.stream.*;

public Map<String, DealProduct> loadAllSyndicatedUnderwrittenDealProducts() {
    List<Function<DealProduct, String>> attributeExtractors = Arrays.asList(
        DealProduct::getTypeOfLoan,
        DealProduct::getUwStatus,
        // Add more attribute extractors for additional attributes
        dp -> dp.getSomeOtherAttribute(),
        dp -> dp.getYetAnotherAttribute()
    );

    return StreamSupport.stream(
            dealProductRepository.whereDirect()
                    .eq(DealProduct.FUNDING_ARRANGEMENT, SYNDICATED)
                    .eq(DealProduct.DISTRIBUTION_METHOD, UNDERWRITTEN)
                    .fetch()
                    .spliterator(), false)
            .collect(
                    toMap(
                            DealProduct::getDealId,
                            identity(),
                            (dp1, dp2) -> {
                                // Custom merge function
                                for (Function<DealProduct, String> extractor : attributeExtractors) {
                                    String attr1 = extractor.apply(dp1);
                                    String attr2 = extractor.apply(dp2);
                                    if (!attr1.isEmpty() && !attr2.isEmpty()) {
                                        // Both have non-empty attribute, proceed to the next
                                        continue;
                                    } else if (!attr1.isEmpty() || !attr2.isEmpty()) {
                                        // Keep the one with non-empty attribute
                                        return !attr1.isEmpty() ? dp1 : dp2;
                                    }
                                }
                                // If none of the attributes is non-empty, keep the one with the latest date
                                return dp1.getDate().isAfter(dp2.getDate()) ? dp1 : dp2;
                            }
                    )
            );
}



import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDate;
import java.util.Map;
import java.util.stream.Stream;
import java.util.function.Function;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class YourTestClass {

    @Mock
    private DealProductRepository dealProductRepository;

    private YourClassUnderTest yourClassUnderTest;

    @BeforeEach
    void setup() {
        yourClassUnderTest = new YourClassUnderTest(dealProductRepository);
    }

    @Test
    public void testLoadAllSyndicatedUnderwrittenDealProducts() {
        // Sample DealProduct instances for testing
        DealProduct dp1 = new DealProduct("1", "Type1", "Status1", LocalDate.of(2022, 1, 1));
        DealProduct dp2 = new DealProduct("2", "Type2", "Status2", LocalDate.of(2022, 2, 2));
        DealProduct dp3 = new DealProduct("3", "Type3", "Status3", LocalDate.of(2022, 3, 3));
        DealProduct dp4 = new DealProduct("4", "Type4", "Status4", LocalDate.of(2022, 4, 4));
        DealProduct dp5 = new DealProduct("5", "Type5", "Status5", LocalDate.of(2022, 5, 5));

        // Mock the behavior of dealProductRepository
        when(dealProductRepository.whereDirect()
                .eq(eq(DealProduct.FUNDING_ARRANGEMENT), eq(SYNDICATED))
                .eq(eq(DealProduct.DISTRIBUTION_METHOD), eq(UNDERWRITTEN))
                .fetch().spliterator())
                .thenReturn(Stream.of(dp1, dp2, dp3, dp4, dp5).spliterator());

        Map<String, DealProduct> result = yourClassUnderTest.loadAllSyndicatedUnderwrittenDealProducts();

        // Assertions
        assertNotNull(result);
        assertEquals(5, result.size());
        assertTrue(result.containsKey("2"));
        assertEquals(dp2, result.get("2"));
        assertFalse(result.containsKey("1"));
        assertTrue(result.containsKey("3"));
        assertEquals(dp3, result.get("3"));
        assertTrue(result.containsKey("4"));
        assertEquals(dp4, result.get("4"));
        assertTrue(result.containsKey("5"));
        assertEquals(dp5, result.get("5"));
    }

    @Test
    public void testLoadAllSyndicatedUnderwrittenDealProductsWithEmptyTypeOfLoan() {
        // Sample DealProduct instances with empty typeOfLoan for testing
        DealProduct dp1 = new DealProduct("1", "", "Status1", LocalDate.of(2022, 1, 1));
        DealProduct dp2 = new DealProduct("2", "Type2", "", LocalDate.of(2022, 2, 2));

        // Mock the behavior of dealProductRepository
        when(dealProductRepository.whereDirect()
                .eq(eq(DealProduct.FUNDING_ARRANGEMENT), eq(SYNDICATED))
                .eq(eq(DealProduct.DISTRIBUTION_METHOD), eq(UNDERWRITTEN))
                .fetch().spliterator())
                .thenReturn(Stream.of(dp1, dp2).spliterator());

        Map<String, DealProduct> result = yourClassUnderTest.loadAllSyndicatedUnderwrittenDealProducts();

        // Assertions
        assertNotNull(result);
        assertEquals(2, result.size());
        assertTrue(result.containsKey("2"));
        assertEquals(dp2, result.get("2"));
        assertFalse(result.containsKey("1"));
    }

    @Test
    public void testLoadAllSyndicatedUnderwrittenDealProductsWithEmptyUwStatus() {
        // Sample DealProduct instances with empty uwStatus for testing
        DealProduct dp1 = new DealProduct("1", "Type1", "", LocalDate.of(2022, 1, 1));
        DealProduct dp2 = new DealProduct("2", "Type2", "Status2", "", LocalDate.of(2022, 2, 2));

        // Mock the behavior of dealProductRepository
        when(dealProductRepository.whereDirect()
                .eq(eq(DealProduct.FUNDING_ARRANGEMENT), eq(SYNDICATED))
                .eq(eq(DealProduct.DISTRIBUTION_METHOD), eq(UNDERWRITTEN))
                .fetch().spliterator())
                .thenReturn(Stream.of(dp1, dp2).spliterator());

        Map<String, DealProduct> result = yourClassUnderTest.loadAllSyndicatedUnderwrittenDealProducts();

        // Assertions
        assertNotNull(result);
        assertEquals(2, result.size());
        assertTrue(result.containsKey("2"));
        assertEquals(dp2, result.get("2"));
        assertFalse(result.containsKey("1"));
    }

    // Add more test cases for different scenarios as needed
}


/////

import java.util.*;
import java.util.function.Function;

public Map<String, DealProduct> loadAllSyndicatedUnderwrittenDealProducts() {
    List<Function<DealProduct, String>> attributeExtractors = Arrays.asList(
        DealProduct::getTypeOfLoan,
        DealProduct::getUwStatus
        // Add more attributes as needed
    );

    return StreamSupport.stream(
        dealProductRepository.whereDirect()
            .eq(DealProduct.FUNDING_ARRANGEMENT, SYNDICATED)
            .eq(DealProduct.DISTRIBUTION_METHOD, UNDERWRITTEN)
            .fetch()
            .spliterator(), false)
        .collect(
            toMap(
                DealProduct::getDealId,
                identity(),
                (dp1, dp2) -> mergeDealProducts(dp1, dp2, attributeExtractors)
            )
        );
}

private DealProduct mergeDealProducts(DealProduct dp1, DealProduct dp2, List<Function<DealProduct, String>> attributeExtractors) {
    for (Function<DealProduct, String> extractor : attributeExtractors) {
        String attr1 = extractor.apply(dp1);
        String attr2 = extractor.apply(dp2);
        if (!attr1.isEmpty() && !attr2.isEmpty()) {
            // Both have non-empty attribute, proceed to the next
            continue;
        } else if (!attr1.isEmpty() || !attr2.isEmpty()) {
            // Keep the one with non-empty attribute
            return !attr1.isEmpty() ? dp1 : dp2;
        }
    }
    // If none of the attributes are non-empty, keep the one with the latest date
    return dp1.getDate().isAfter(dp2.getDate()) ? dp1 : dp2;
}



import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDate;
import java.util.Map;
import java.util.function.Function;
import java.util.stream.Stream;

import static org.mockito.Mockito.*;
import static org.junit.jupiter.api.Assertions.*;

@ExtendWith(MockitoExtension.class)
public class YourTestClass {

    @Mock
    private DealProductRepository dealProductRepository;

    private YourClassUnderTest yourClassUnderTest;

    @BeforeEach
    void setup() {
        yourClassUnderTest = new YourClassUnderTest(dealProductRepository);
    }

    @Test
    public void testLoadAllSyndicatedUnderwrittenDealProducts() {
        // Sample DealProduct instances for testing
        DealProduct dp1 = new DealProduct("1", "Type1", "Status1", LocalDate.of(2022, 1, 1));
        DealProduct dp2 = new DealProduct("2", "Type2", "Status2", LocalDate.of(2022, 2, 2));
        DealProduct dp3 = new DealProduct("3", "Type3", "Status3", LocalDate.of(2022, 3, 3));
        DealProduct dp4 = new DealProduct("4", "Type4", "Status4", LocalDate.of(2022, 4, 4));
        DealProduct dp5 = new DealProduct("5", "Type5", "Status5", LocalDate.of(2022, 5, 5));

        // Mock the behavior of dealProductRepository
        when(dealProductRepository.whereDirect()
                .eq(eq(DealProduct.FUNDING_ARRANGEMENT), eq(SYNDICATED))
                .eq(eq(DealProduct.DISTRIBUTION_METHOD), eq(UNDERWRITTEN))
                .fetch().spliterator())
                .thenReturn(Stream.of(dp1, dp2, dp3, dp4, dp5).spliterator());

        Map<String, DealProduct> result = yourClassUnderTest.loadAllSyndicatedUnderwrittenDealProducts();

        // Assertions
        assertNotNull(result);
        assertEquals(5, result.size());
        assertTrue(result.containsKey("2"));
        assertEquals(dp2, result.get("2"));
        assertFalse(result.containsKey("1"));
        assertTrue(result.containsKey("3"));
        assertEquals(dp3, result.get("3"));
        assertTrue(result.containsKey("4"));
        assertEquals(dp4, result.get("4"));
        assertTrue(result.containsKey("5"));
        assertEquals(dp5, result.get("5"));
    }

    @Test
    public void testMergeDealProducts() {
        // Sample DealProduct instances for testing the merge function
        DealProduct dp1 = new DealProduct("1", "Type1", "Status1", LocalDate.of(2022, 1, 1));
        DealProduct dp2 = new DealProduct("2", "", "Status2", LocalDate.of(2022, 2, 2));

        // List of attribute extractors for merge function
        List<Function<DealProduct, String>> attributeExtractors = Arrays.asList(
            DealProduct::getTypeOfLoan,
            DealProduct::getUwStatus
        );

        DealProduct merged = yourClassUnderTest.mergeDealProducts(dp1, dp2, attributeExtractors);

        // Assertions
        assertNotNull(merged);
        assertEquals(dp1.getDealId(), merged.getDealId());
        assertEquals(dp1.getTypeOfLoan(), merged.getTypeOfLoan());
        assertEquals(dp2.getUwStatus(), merged.getUwStatus());
        assertEquals(dp1.getDate(), merged.getDate());
    }

    // Add more test cases as needed
}



import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.Parameterized;

import java.time.LocalDate;
import java.util.Arrays;
import java.util.Collection;
import java.util.function.Function;
import java.util.List;

import static org.junit.Assert.assertEquals;
import static org.mockito.Mockito.*;
import org.apache.commons.lang3.StringUtils;

@RunWith(Parameterized.class)
public class YourTestClass {

    @Mock
    private DealProductRepository dealProductRepository;

    private YourClassUnderTest yourClassUnderTest;

    @Parameterized.Parameters
    public static Collection<Object[]> testCases() {
        return Arrays.asList(new Object[][] {
            // Add your test cases here in the form of arrays
            { "Type1", "Status1", LocalDate.of(2022, 1, 1), "Type2", "Status2", LocalDate.of(2022, 2, 2), "Type1", "Status1", LocalDate.of(2022, 1, 1) },
            { "Type1", "Status1", LocalDate.of(2022, 1, 1), "", "", null, "Type1", "Status1", LocalDate.of(2022, 1, 1) },
            { "", "", null, "Type2", "Status2", LocalDate.of(2022, 2, 2), "Type2", "Status2", LocalDate.of(2022, 2, 2) },
            { "", "", null, "", "", null, "", "", null }
        });
    }

    private String type1;
    private String uwStatus1;
    private LocalDate date1;
    private String type2;
    private String uwStatus2;
    private LocalDate date2;
    private String expectedType;
    private String expectedUwStatus;
    private LocalDate expectedDate;

    public YourTestClass(String type1, String uwStatus1, LocalDate date1, String type2, String uwStatus2, LocalDate date2,
            String expectedType, String expectedUwStatus, LocalDate expectedDate) {
        this.type1 = type1;
        this.uwStatus1 = uwStatus1;
        this.date1 = date1;
        this.type2 = type2;
        this.uwStatus2 = uwStatus2;
        this.date2 = date2;
        this.expectedType = expectedType;
        this.expectedUwStatus = expectedUwStatus;
        this.expectedDate = expectedDate;
    }

    @Before
    public void setup() {
        yourClassUnderTest = new YourClassUnderTest(dealProductRepository);
    }

    @Test
    public void testMergeDealProducts() {
        // Sample DealProduct instances for testing the merge function
        DealProduct dp1 = new DealProduct("1", type1, uwStatus1, date1);
        DealProduct dp2 = new DealProduct("2", type2, uwStatus2, date2);

        // List of attribute extractors for merge function
        List<Function<DealProduct, String>> attributeExtractors = Arrays.asList(
            DealProduct::getTypeOfLoan,
            DealProduct::getUwStatus
        );

        DealProduct merged = yourClassUnderTest.mergeDealProducts(dp1, dp2, attributeExtractors);

        // Assertions
        assertEquals(expectedType, merged.getTypeOfLoan());
        assertEquals(expectedUwStatus, merged.getUwStatus());
        assertEquals(expectedDate, merged.getDate());
    }
}
